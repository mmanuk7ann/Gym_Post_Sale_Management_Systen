{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83d\udcc4 Project Overview \ud83e\udde9 Problem Gym owners often struggle to track member attendance and identify which customers are at risk of leaving. Without the ability to analyze customer behavior, it's difficult to take proactive steps to retain members. Most gyms lack a personalized and data-driven system to monitor engagement or integrate targeted retention campaigns. \ud83d\udca1 Solution Our system provides a microservice-based platform for gym analytics and retention support. It allows each gym to create its own account, monitor attendance, and segment customers using real-time behavioral data. Specifically, it enables: Automatic detection of at-risk customers based on attendance frequency and recency A web dashboard that visualizes key customer metrics per gym Email functionality to contact at-risk customers directly from the platform Integration with gym marketing efforts to re-engage members before they churn \ud83c\udfaf Expected Outcomes Better visibility into customer behavior across gyms Reduced churn through timely, data-driven retention actions Personalized outreach via built-in email communication Improved customer lifetime value and engagement Welcome to Python Microservice Design Documentation This documentation provides a full overview of the microservice-based system developed by Group 3. It includes detailed information about each core service and how they interact to deliver functionality. \ud83d\udcda Overview This project implements a modular architecture for a modern web-based application using microservices. The main components documented include: API Endpoints Application Logic Database Design Model Creation Feedback and User Interaction \ud83d\udcc1 Documentation Structure Navigate through the following sections: API Endpoints Database Design Application Logic ML / Business Logic Models \ud83d\ude80 Deployment This documentation is built with MkDocs and deployed using GitHub Actions to GitHub Pages. \ud83d\udc65 Authors Artsvik Avetisyan Levon Titanyan Ani Gharibyan Manuk Manukyan Armen Ghazaryan \ud83d\udccc Technologies Used Python FastAPI PostgreSQL Docker Streamlit","title":"\ud83d\udcc4 Project Overview"},{"location":"#project-overview","text":"","title":"\ud83d\udcc4 Project Overview"},{"location":"#problem","text":"Gym owners often struggle to track member attendance and identify which customers are at risk of leaving. Without the ability to analyze customer behavior, it's difficult to take proactive steps to retain members. Most gyms lack a personalized and data-driven system to monitor engagement or integrate targeted retention campaigns.","title":"\ud83e\udde9 Problem"},{"location":"#solution","text":"Our system provides a microservice-based platform for gym analytics and retention support. It allows each gym to create its own account, monitor attendance, and segment customers using real-time behavioral data. Specifically, it enables: Automatic detection of at-risk customers based on attendance frequency and recency A web dashboard that visualizes key customer metrics per gym Email functionality to contact at-risk customers directly from the platform Integration with gym marketing efforts to re-engage members before they churn","title":"\ud83d\udca1 Solution"},{"location":"#expected-outcomes","text":"Better visibility into customer behavior across gyms Reduced churn through timely, data-driven retention actions Personalized outreach via built-in email communication Improved customer lifetime value and engagement","title":"\ud83c\udfaf Expected Outcomes"},{"location":"#welcome-to-python-microservice-design-documentation","text":"This documentation provides a full overview of the microservice-based system developed by Group 3. It includes detailed information about each core service and how they interact to deliver functionality.","title":"Welcome to Python Microservice Design Documentation"},{"location":"#overview","text":"This project implements a modular architecture for a modern web-based application using microservices. The main components documented include: API Endpoints Application Logic Database Design Model Creation Feedback and User Interaction","title":"\ud83d\udcda Overview"},{"location":"#documentation-structure","text":"Navigate through the following sections: API Endpoints Database Design Application Logic ML / Business Logic Models","title":"\ud83d\udcc1 Documentation Structure"},{"location":"#deployment","text":"This documentation is built with MkDocs and deployed using GitHub Actions to GitHub Pages.","title":"\ud83d\ude80 Deployment"},{"location":"#authors","text":"Artsvik Avetisyan Levon Titanyan Ani Gharibyan Manuk Manukyan Armen Ghazaryan","title":"\ud83d\udc65 Authors"},{"location":"#technologies-used","text":"Python FastAPI PostgreSQL Docker Streamlit","title":"\ud83d\udccc Technologies Used"},{"location":"api/","text":"\ud83d\udcd8 API Endpoints Documentation This document describes key API endpoints for the MVP version of the application. \ud83d\udce7 POST /email/send \u2014 Send Email to Customer Description: Sends an email to a specified customer on behalf of the authenticated gym. The email is sent asynchronously as a background task, so the request returns immediately. Authentication: Internal \u2014 gym must be authenticated Request Body (JSON): { \"email\": \"customer@example.com\", \"text\": \"Your subscription has been updated.\" } \ud83d\udc65 GET /customers/customer/all \u2014 List All Customers Description: Retrieves a list of all customers associated with the currently authenticated gym. Authentication: Gym must be logged in (JWT token) Response: [ { \"customer_id\": 1, \"name\": \"John Doe\", \"email\": \"john@example.com\", \"join_date\": \"2024-12-01\", \"status\": \"active\" } ] \u26a0\ufe0f GET /customers/customer/risk \u2014 List At-Risk Customers Description: Returns a list of customers flagged as \"at risk\" of churning, based on internal logic such as infrequent attendance, nearing the end of subscription, or lack of engagement. Authentication: Gym must be logged in (JWT token) Response: [ { \"customer_id\": 7, \"name\": \"Jane Smith\", \"email\": \"jane@example.com\", \"risk_status\": \"high\", \"last_attendance\": \"2025-04-01\" } ] \ud83d\udcca GET /gyms/gym/members-count \u2014 Get Total Member Count Description: Returns the total number of registered members (customers) currently associated with the authenticated gym. Useful for dashboards and analytics. Authentication: Gym must be logged in (JWT token) Response: { \"count\": 42 } \ud83d\udcc8 GET /gyms/gym/average-clv \u2014 Get Average Customer Lifetime Value (CLV) Description: Returns the average Customer Lifetime Value (CLV) for all customers registered under the authenticated gym. Useful for understanding long-term customer value and guiding retention strategies. Authentication: Gym must be logged in (JWT token) Response: { \"average_clv\": 2485.75 } \ud83d\udce6 GET /gyms/gym/customers-by-package \u2014 Customers Grouped by Package Description: Returns the total number of customers grouped by the subscription package they are enrolled in, specific to the authenticated gym. Useful for visualizing package popularity and usage distribution. Authentication: Gym must be logged in (JWT token) Response: { \"packages\": [ { \"package_name\": \"Plus Plan\", \"total_customers\": 18 }, { \"package_name\": \"Basic Plan\", \"total_customers\": 32 } ] } \ud83e\uddee GET /gyms/gym/risk-count \u2014 Count Risk Customers Description: Returns the total number of at-risk customers under the authenticated gym. Authentication: Gym must be logged in (JWT token) Response: { \"risk_count\": 8 } \ud83d\udcc5 GET /gyms/gym/last_week_visits \u2014 Last Week Visits Description: Returns the number of visits made by each customer in the last 7 days. Authentication: Gym must be logged in (JWT token) Response: [ { \"customer_id\": 5, \"name\": \"Alex Johnson\", \"visits\": 3 }, { \"customer_id\": 9, \"name\": \"Maria Lopez\", \"visits\": 1 } ] \ud83d\udd27 System \ud83e\ude7a GET /health \u2014 Health Check Description: Returns a simple status to indicate that the backend is running. Authentication: Public Response: { \"status\": \"ok\" }","title":"\ud83d\udcd8 API Endpoints Documentation"},{"location":"api/#api-endpoints-documentation","text":"This document describes key API endpoints for the MVP version of the application.","title":"\ud83d\udcd8 API Endpoints Documentation"},{"location":"api/#post-emailsend-send-email-to-customer","text":"Description: Sends an email to a specified customer on behalf of the authenticated gym. The email is sent asynchronously as a background task, so the request returns immediately. Authentication: Internal \u2014 gym must be authenticated Request Body (JSON): { \"email\": \"customer@example.com\", \"text\": \"Your subscription has been updated.\" }","title":"\ud83d\udce7 POST /email/send \u2014 Send Email to Customer"},{"location":"api/#get-customerscustomerall-list-all-customers","text":"Description: Retrieves a list of all customers associated with the currently authenticated gym. Authentication: Gym must be logged in (JWT token) Response: [ { \"customer_id\": 1, \"name\": \"John Doe\", \"email\": \"john@example.com\", \"join_date\": \"2024-12-01\", \"status\": \"active\" } ]","title":"\ud83d\udc65 GET /customers/customer/all \u2014 List All Customers"},{"location":"api/#get-customerscustomerrisk-list-at-risk-customers","text":"Description: Returns a list of customers flagged as \"at risk\" of churning, based on internal logic such as infrequent attendance, nearing the end of subscription, or lack of engagement. Authentication: Gym must be logged in (JWT token) Response: [ { \"customer_id\": 7, \"name\": \"Jane Smith\", \"email\": \"jane@example.com\", \"risk_status\": \"high\", \"last_attendance\": \"2025-04-01\" } ]","title":"\u26a0\ufe0f GET /customers/customer/risk \u2014 List At-Risk Customers"},{"location":"api/#get-gymsgymmembers-count-get-total-member-count","text":"Description: Returns the total number of registered members (customers) currently associated with the authenticated gym. Useful for dashboards and analytics. Authentication: Gym must be logged in (JWT token) Response: { \"count\": 42 }","title":"\ud83d\udcca GET /gyms/gym/members-count \u2014 Get Total Member Count"},{"location":"api/#get-gymsgymaverage-clv-get-average-customer-lifetime-value-clv","text":"Description: Returns the average Customer Lifetime Value (CLV) for all customers registered under the authenticated gym. Useful for understanding long-term customer value and guiding retention strategies. Authentication: Gym must be logged in (JWT token) Response: { \"average_clv\": 2485.75 }","title":"\ud83d\udcc8 GET /gyms/gym/average-clv \u2014 Get Average Customer Lifetime Value (CLV)"},{"location":"api/#get-gymsgymcustomers-by-package-customers-grouped-by-package","text":"Description: Returns the total number of customers grouped by the subscription package they are enrolled in, specific to the authenticated gym. Useful for visualizing package popularity and usage distribution. Authentication: Gym must be logged in (JWT token) Response: { \"packages\": [ { \"package_name\": \"Plus Plan\", \"total_customers\": 18 }, { \"package_name\": \"Basic Plan\", \"total_customers\": 32 } ] }","title":"\ud83d\udce6 GET /gyms/gym/customers-by-package \u2014 Customers Grouped by Package"},{"location":"api/#get-gymsgymrisk-count-count-risk-customers","text":"Description: Returns the total number of at-risk customers under the authenticated gym. Authentication: Gym must be logged in (JWT token) Response: { \"risk_count\": 8 }","title":"\ud83e\uddee GET /gyms/gym/risk-count \u2014 Count Risk Customers"},{"location":"api/#get-gymsgymlast_week_visits-last-week-visits","text":"Description: Returns the number of visits made by each customer in the last 7 days. Authentication: Gym must be logged in (JWT token) Response: [ { \"customer_id\": 5, \"name\": \"Alex Johnson\", \"visits\": 3 }, { \"customer_id\": 9, \"name\": \"Maria Lopez\", \"visits\": 1 } ]","title":"\ud83d\udcc5 GET /gyms/gym/last_week_visits \u2014 Last Week Visits"},{"location":"api/#system","text":"","title":"\ud83d\udd27 System"},{"location":"api/#get-health-health-check","text":"Description: Returns a simple status to indicate that the backend is running. Authentication: Public Response: { \"status\": \"ok\" }","title":"\ud83e\ude7a GET /health \u2014 Health Check"},{"location":"database/","text":"\ud83d\uddc3\ufe0f Database Documentation This service manages the PostgreSQL database for the gym management system. It stores all backend data related to gyms, members, packages, attendance, transactions, and analytics (RFM & CLV). The database is automatically populated with synthetic data each time the system is initialized, making it ideal for testing and demonstration purposes. \ud83e\udde9 ER Diagram The schema includes the following interconnected tables: gyms customers packages attendance transactions rfm clv \ud83d\udcce See schema image: \ud83d\udcca Table Descriptions \ud83c\udfe2 gyms Stores registered gyms and login credentials. Column Type Description gym_id int Primary key name varchar Gym name username varchar Login username email varchar Login email hashed_password varchar Encrypted password address varchar Address phone varchar Contact number \ud83d\udc65 customers Contains all gym members. Column Type Description customer_id int Primary key gym_id int Foreign key \u2192 gyms name varchar Full name email varchar Email phone varchar Phone number birth_date date Birth date gender varchar Gender join_date date Membership start date status varchar Active, frozen, cancelled package_id int Foreign key \u2192 packages trainer_id int Optional trainer link \ud83d\udce6 packages Membership options defined by each gym. Column Type Description package_id int Primary key gym_id int Foreign key \u2192 gyms name varchar Plan name duration_months int Duration in months price decimal Price of the package description text Extra details \ud83d\udd52 attendance Tracks customer check-in and check-out activity. Column Type Description attendance_id int Primary key customer_id int Foreign key \u2192 customers check_in datetime Entry time check_out datetime Exit time \ud83d\udcb8 transactions Financial transactions linked to each customer. Column Type Description transaction_id int Primary key customer_id int Foreign key \u2192 customers amount int Payment amount date date Payment date \ud83d\udcc8 rfm Recency-Frequency-Monetary scores for segmentation. Column Type Description rfm_id int Primary key customer_id int Foreign key \u2192 customers recency_score int Days since last activity frequency_score int Visit frequency monetary_score decimal Total amount spent customer_segment varchar Segment classification \ud83d\udca1 clv Predicted Customer Lifetime Value metrics. Column Type Description clv_id int Primary key customer_id int Foreign key \u2192 customers clv_value decimal Estimated lifetime value average_order_value decimal Avg. purchase amount predicted_customer_type varchar Predicted behavior segment \ud83e\uddea Data Generation This project uses synthetic data , automatically generated at runtime for testing purposes. All tables are filled with realistic but fake data (e.g. names, emails, payment history) to enable functional testing of API endpoints, dashboards, and analytics. No CSVs or external files are used to load the data. Each time the app is restarted, a fresh dataset is generated. Useful for showcasing features like churn detection and lifetime value predictions. \ud83d\udee0\ufe0f Dependencies SQLAlchemy \u2014 ORM for defining models and managing schema psycopg2-binary \u2014 PostgreSQL driver pandas \u2014 Used optionally for tabular manipulation (e.g. RFM/CLV scoring) dotenv \u2014 Environment variable loading \ud83d\udd10 Configuration All credentials are stored in a .env file in the root of the project: ```env DATABASE_URL=postgresql+psycopg2://postgres:password@db:5432/demodb DB_USER=postgres DB_PASSWORD=password DB_NAME=demodb PGADMIN_EMAIL=admin@admin.com PGADMIN_PASSWORD=admin SECRET_KEY=secret-key","title":"\ud83d\uddc3\ufe0f Database Documentation"},{"location":"database/#database-documentation","text":"This service manages the PostgreSQL database for the gym management system. It stores all backend data related to gyms, members, packages, attendance, transactions, and analytics (RFM & CLV). The database is automatically populated with synthetic data each time the system is initialized, making it ideal for testing and demonstration purposes.","title":"\ud83d\uddc3\ufe0f Database Documentation"},{"location":"database/#er-diagram","text":"The schema includes the following interconnected tables: gyms customers packages attendance transactions rfm clv \ud83d\udcce See schema image:","title":"\ud83e\udde9 ER Diagram"},{"location":"database/#table-descriptions","text":"","title":"\ud83d\udcca Table Descriptions"},{"location":"database/#gyms","text":"Stores registered gyms and login credentials. Column Type Description gym_id int Primary key name varchar Gym name username varchar Login username email varchar Login email hashed_password varchar Encrypted password address varchar Address phone varchar Contact number","title":"\ud83c\udfe2 gyms"},{"location":"database/#customers","text":"Contains all gym members. Column Type Description customer_id int Primary key gym_id int Foreign key \u2192 gyms name varchar Full name email varchar Email phone varchar Phone number birth_date date Birth date gender varchar Gender join_date date Membership start date status varchar Active, frozen, cancelled package_id int Foreign key \u2192 packages trainer_id int Optional trainer link","title":"\ud83d\udc65 customers"},{"location":"database/#packages","text":"Membership options defined by each gym. Column Type Description package_id int Primary key gym_id int Foreign key \u2192 gyms name varchar Plan name duration_months int Duration in months price decimal Price of the package description text Extra details","title":"\ud83d\udce6 packages"},{"location":"database/#attendance","text":"Tracks customer check-in and check-out activity. Column Type Description attendance_id int Primary key customer_id int Foreign key \u2192 customers check_in datetime Entry time check_out datetime Exit time","title":"\ud83d\udd52 attendance"},{"location":"database/#transactions","text":"Financial transactions linked to each customer. Column Type Description transaction_id int Primary key customer_id int Foreign key \u2192 customers amount int Payment amount date date Payment date","title":"\ud83d\udcb8 transactions"},{"location":"database/#rfm","text":"Recency-Frequency-Monetary scores for segmentation. Column Type Description rfm_id int Primary key customer_id int Foreign key \u2192 customers recency_score int Days since last activity frequency_score int Visit frequency monetary_score decimal Total amount spent customer_segment varchar Segment classification","title":"\ud83d\udcc8 rfm"},{"location":"database/#clv","text":"Predicted Customer Lifetime Value metrics. Column Type Description clv_id int Primary key customer_id int Foreign key \u2192 customers clv_value decimal Estimated lifetime value average_order_value decimal Avg. purchase amount predicted_customer_type varchar Predicted behavior segment","title":"\ud83d\udca1 clv"},{"location":"database/#data-generation","text":"This project uses synthetic data , automatically generated at runtime for testing purposes. All tables are filled with realistic but fake data (e.g. names, emails, payment history) to enable functional testing of API endpoints, dashboards, and analytics. No CSVs or external files are used to load the data. Each time the app is restarted, a fresh dataset is generated. Useful for showcasing features like churn detection and lifetime value predictions.","title":"\ud83e\uddea Data Generation"},{"location":"database/#dependencies","text":"SQLAlchemy \u2014 ORM for defining models and managing schema psycopg2-binary \u2014 PostgreSQL driver pandas \u2014 Used optionally for tabular manipulation (e.g. RFM/CLV scoring) dotenv \u2014 Environment variable loading","title":"\ud83d\udee0\ufe0f Dependencies"},{"location":"database/#configuration","text":"All credentials are stored in a .env file in the root of the project: ```env DATABASE_URL=postgresql+psycopg2://postgres:password@db:5432/demodb DB_USER=postgres DB_PASSWORD=password DB_NAME=demodb PGADMIN_EMAIL=admin@admin.com PGADMIN_PASSWORD=admin SECRET_KEY=secret-key","title":"\ud83d\udd10 Configuration"},{"location":"frontend/","text":"\ud83d\udda5\ufe0f Frontend Interface The frontend is a dynamic, interactive dashboard built with Streamlit , designed to provide gym managers with real-time insights and actionable tools. It consumes RESTful API endpoints exposed by the backend and visualizes metrics like member counts, risk assessments, and customer segmentation. \u2699\ufe0f Tech Stack Streamlit \u2014 Main frontend framework Python \u2014 Logic and layout Requests \u2014 REST API communication Pandas \u2014 Table and chart formatting Docker \u2014 Containerized deployment ( Dockerfile provided) \ud83e\udded Navigation The sidebar contains three main tabs: Dashboard : Visual KPIs and a bar chart of membership distribution Customers : Searchable and filterable member list Risk Management : At-risk members with email outreach \ud83d\udcca Dashboard Tab Displays four key metrics: - Total Members - At-Risk Members - Average CLV - Last Week Visits It also shows a bar chart of customers by package using real-time data from the /customers-by-package endpoint. \ud83d\udc65 Customers Tab This view displays a searchable and filterable list of all registered customers: - Filters: Gender, Membership Type, Name - Data is fetched from: GET /customers/customer/all \u26a0\ufe0f Risk Management Tab Identifies at-risk members and lets admins take action: - Displays last visit, membership type, and inactivity days - Admin can send custom emails via POST /email/send - Filters: Membership Type, Name \ud83d\udd0c API Integration All data is fetched live from the backend using requests.get() : - /gyms/gym/members-count - /gyms/gym/average-clv - /gyms/gym/risk-count - /gyms/gym/last_week_visits - /customers/customer/all - /customers/customer/risk - /gyms/gym/customers-by-package - /email/send \ud83d\udc33 Dockerized Setup The frontend runs inside a Docker container on port 8501 . Dockerfile: FROM python:3.10-slim-bullseye RUN apt-get update && apt-get install -y \\ build-essential libpq-dev libfreetype6-dev libpng-dev libjpeg-dev \\ libblas-dev liblapack-dev gfortran \\ && rm -rf /var/lib/apt/lists/* WORKDIR /app COPY requirements.txt . RUN pip install --no-cache-dir -r requirements.txt COPY . . EXPOSE 8501 CMD [\"streamlit\", \"run\", \"app.py\", \"--server.port=8501\", \"--server.headless=true\", \"--server.runOnSave=true\"] \ud83d\udcc2 Folder Structure frontend/ \u251c\u2500\u2500 app.py # Main dashboard logic \u251c\u2500\u2500 Dockerfile # Container config \u251c\u2500\u2500 requirements.txt # Python dependencies \ud83e\uddea Notes Data is regenerated on each run using synthetic logic The dashboard is self-refreshing based on API calls All business logic is handled by the backend; frontend is display + interaction layer only \ud83d\ude80 How to Run cd frontend docker build -t gym-dashboard . docker run -p 8501:8501 gym-dashboard Visit http://localhost:8501 in your browser to interact with the dashboard.","title":"\ud83d\udda5\ufe0f Frontend Interface"},{"location":"frontend/#frontend-interface","text":"The frontend is a dynamic, interactive dashboard built with Streamlit , designed to provide gym managers with real-time insights and actionable tools. It consumes RESTful API endpoints exposed by the backend and visualizes metrics like member counts, risk assessments, and customer segmentation.","title":"\ud83d\udda5\ufe0f Frontend Interface"},{"location":"frontend/#tech-stack","text":"Streamlit \u2014 Main frontend framework Python \u2014 Logic and layout Requests \u2014 REST API communication Pandas \u2014 Table and chart formatting Docker \u2014 Containerized deployment ( Dockerfile provided)","title":"\u2699\ufe0f Tech Stack"},{"location":"frontend/#navigation","text":"The sidebar contains three main tabs: Dashboard : Visual KPIs and a bar chart of membership distribution Customers : Searchable and filterable member list Risk Management : At-risk members with email outreach","title":"\ud83e\udded Navigation"},{"location":"frontend/#dashboard-tab","text":"Displays four key metrics: - Total Members - At-Risk Members - Average CLV - Last Week Visits It also shows a bar chart of customers by package using real-time data from the /customers-by-package endpoint.","title":"\ud83d\udcca Dashboard Tab"},{"location":"frontend/#customers-tab","text":"This view displays a searchable and filterable list of all registered customers: - Filters: Gender, Membership Type, Name - Data is fetched from: GET /customers/customer/all","title":"\ud83d\udc65 Customers Tab"},{"location":"frontend/#risk-management-tab","text":"Identifies at-risk members and lets admins take action: - Displays last visit, membership type, and inactivity days - Admin can send custom emails via POST /email/send - Filters: Membership Type, Name","title":"\u26a0\ufe0f Risk Management Tab"},{"location":"frontend/#api-integration","text":"All data is fetched live from the backend using requests.get() : - /gyms/gym/members-count - /gyms/gym/average-clv - /gyms/gym/risk-count - /gyms/gym/last_week_visits - /customers/customer/all - /customers/customer/risk - /gyms/gym/customers-by-package - /email/send","title":"\ud83d\udd0c API Integration"},{"location":"frontend/#dockerized-setup","text":"The frontend runs inside a Docker container on port 8501 . Dockerfile: FROM python:3.10-slim-bullseye RUN apt-get update && apt-get install -y \\ build-essential libpq-dev libfreetype6-dev libpng-dev libjpeg-dev \\ libblas-dev liblapack-dev gfortran \\ && rm -rf /var/lib/apt/lists/* WORKDIR /app COPY requirements.txt . RUN pip install --no-cache-dir -r requirements.txt COPY . . EXPOSE 8501 CMD [\"streamlit\", \"run\", \"app.py\", \"--server.port=8501\", \"--server.headless=true\", \"--server.runOnSave=true\"]","title":"\ud83d\udc33 Dockerized Setup"},{"location":"frontend/#folder-structure","text":"frontend/ \u251c\u2500\u2500 app.py # Main dashboard logic \u251c\u2500\u2500 Dockerfile # Container config \u251c\u2500\u2500 requirements.txt # Python dependencies","title":"\ud83d\udcc2 Folder Structure"},{"location":"frontend/#notes","text":"Data is regenerated on each run using synthetic logic The dashboard is self-refreshing based on API calls All business logic is handled by the backend; frontend is display + interaction layer only","title":"\ud83e\uddea Notes"},{"location":"frontend/#how-to-run","text":"cd frontend docker build -t gym-dashboard . docker run -p 8501:8501 gym-dashboard Visit http://localhost:8501 in your browser to interact with the dashboard.","title":"\ud83d\ude80 How to Run"},{"location":"models/","text":"\ud83e\udd16 Modeling Service The ds service is responsible for performing core customer analytics, including RFM segmentation and Customer Lifetime Value (CLV) estimation. It uses synthetic transactional and attendance data to generate retention insights, which are saved to the PostgreSQL database for further visualization or analysis. \ud83e\uddf1 Architecture Overview This pipeline is implemented using: pandas \u2013 Data manipulation SQLAlchemy \u2013 PostgreSQL interaction scikit-learn \u2013 KMeans clustering matplotlib \u2013 (Optional) plotting support dotenv \u2013 Credential management Python + Docker \u2013 Containerized execution of model logic \ud83d\udce6 Input & Output Flow \ud83d\udd3d Input: Automatically generated CSVs in etl/data/ : attendance.csv transactions.csv customers.csv packages.csv \u2b06 Output: DataFrames saved as tables: rfm \u2013 Recency, Frequency, Monetary segmentation clv \u2013 Estimated customer value and behavior type \ud83d\udd0d Model Components 1. RFM Segmentation Recency : Days since last attendance Frequency : Count of attendance records Monetary : Sum of transaction amounts Data is scaled using StandardScaler , then clustered using KMeans ( n_clusters=4 ). Segments are mapped to: Loyalist At Risk New/Potential High-Value kmeans = KMeans(n_clusters=4, random_state=42) rfm['Segment'] = kmeans.fit_predict(rfm_scaled) 2. CLV Estimation AOV (Average Order Value) = Total spend / Number of orders CLV = AOV \u00d7 Frequency \u00d7 1 (fixed lifespan for simplicity) Output columns include: - clv_value - average_order_value - predicted_customer_type 3. Retention Rate Calculation Customers with recency > 90 days are considered churned. Retention is calculated as: retention_rate = (1 - churned / total) * 100 Printed in console after model run. \ud83d\udcbe Output Tables in Database Table Description rfm Contains RFM scores and cluster-based segments clv Contains CLV values and predicted customer type \ud83d\udcc2 File Structure File Purpose ds_model.py Main script: loads data, runs models .env Contains DATABASE_URL and secrets etl/data/*.csv Synthetic input datasets Dockerfile Container setup for reproducibility \ud83d\udc33 Execution The modeling pipeline is triggered by running: python ds_model.py This script: 1. Loads .csv files 2. Computes RFM + CLV 3. Calculates retention rate 4. Pushes results to PostgreSQL Make sure .env is configured correctly and the PostgreSQL container is running. \ud83d\udd27 Environment Setup Dependencies ( ds/requirements.txt ): pandas sqlalchemy psycopg2-binary python-dotenv scikit-learn matplotlib Install with: pip install -r ds/requirements.txt","title":"\ud83e\udd16 Modeling Service"},{"location":"models/#modeling-service","text":"The ds service is responsible for performing core customer analytics, including RFM segmentation and Customer Lifetime Value (CLV) estimation. It uses synthetic transactional and attendance data to generate retention insights, which are saved to the PostgreSQL database for further visualization or analysis.","title":"\ud83e\udd16 Modeling Service"},{"location":"models/#architecture-overview","text":"This pipeline is implemented using: pandas \u2013 Data manipulation SQLAlchemy \u2013 PostgreSQL interaction scikit-learn \u2013 KMeans clustering matplotlib \u2013 (Optional) plotting support dotenv \u2013 Credential management Python + Docker \u2013 Containerized execution of model logic","title":"\ud83e\uddf1 Architecture Overview"},{"location":"models/#input-output-flow","text":"","title":"\ud83d\udce6 Input &amp; Output Flow"},{"location":"models/#input","text":"Automatically generated CSVs in etl/data/ : attendance.csv transactions.csv customers.csv packages.csv","title":"\ud83d\udd3d Input:"},{"location":"models/#output","text":"DataFrames saved as tables: rfm \u2013 Recency, Frequency, Monetary segmentation clv \u2013 Estimated customer value and behavior type","title":"\u2b06 Output:"},{"location":"models/#model-components","text":"","title":"\ud83d\udd0d Model Components"},{"location":"models/#1-rfm-segmentation","text":"Recency : Days since last attendance Frequency : Count of attendance records Monetary : Sum of transaction amounts Data is scaled using StandardScaler , then clustered using KMeans ( n_clusters=4 ). Segments are mapped to: Loyalist At Risk New/Potential High-Value kmeans = KMeans(n_clusters=4, random_state=42) rfm['Segment'] = kmeans.fit_predict(rfm_scaled)","title":"1. RFM Segmentation"},{"location":"models/#2-clv-estimation","text":"AOV (Average Order Value) = Total spend / Number of orders CLV = AOV \u00d7 Frequency \u00d7 1 (fixed lifespan for simplicity) Output columns include: - clv_value - average_order_value - predicted_customer_type","title":"2. CLV Estimation"},{"location":"models/#3-retention-rate-calculation","text":"Customers with recency > 90 days are considered churned. Retention is calculated as: retention_rate = (1 - churned / total) * 100 Printed in console after model run.","title":"3. Retention Rate Calculation"},{"location":"models/#output-tables-in-database","text":"Table Description rfm Contains RFM scores and cluster-based segments clv Contains CLV values and predicted customer type","title":"\ud83d\udcbe Output Tables in Database"},{"location":"models/#file-structure","text":"File Purpose ds_model.py Main script: loads data, runs models .env Contains DATABASE_URL and secrets etl/data/*.csv Synthetic input datasets Dockerfile Container setup for reproducibility","title":"\ud83d\udcc2 File Structure"},{"location":"models/#execution","text":"The modeling pipeline is triggered by running: python ds_model.py This script: 1. Loads .csv files 2. Computes RFM + CLV 3. Calculates retention rate 4. Pushes results to PostgreSQL Make sure .env is configured correctly and the PostgreSQL container is running.","title":"\ud83d\udc33 Execution"},{"location":"models/#environment-setup","text":"Dependencies ( ds/requirements.txt ): pandas sqlalchemy psycopg2-binary python-dotenv scikit-learn matplotlib Install with: pip install -r ds/requirements.txt","title":"\ud83d\udd27 Environment Setup"}]}